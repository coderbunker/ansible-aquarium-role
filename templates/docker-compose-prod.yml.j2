version: "3"

services:
  app:
    build:
      args:
        user: {{ utilisateur_unix }}
        uid: {{ utilisateur_unix_cree.uid }}
      context: ./
      dockerfile: Dockerfile
    image: aquarium:latest-local
    container_name: aquarium-app
    restart: unless-stopped
    working_dir: {{ aquarium_racine }}
    volumes:
      - ./:{{ aquarium_racine }}
    extra_hosts:
      - '{{ jitsi_domaine }}:{{ ansible_default_ipv4.address }}'
    networks:
        meet.jitsi:

  db:
    image: mysql:5.7
    container_name: aquarium-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
      - ./docker-compose/mysql-data:/var/lib/mysql
      - ./docker-compose/mysql-conf.d:/etc/mysql/conf.d
    networks:
        meet.jitsi:

  nginx:
    image: nginx:alpine
    container_name: aquarium-nginx
    restart: unless-stopped
    ports:
      - 8000:80
    #  - 443:443
    volumes:
      - ./:/var/www/aquarium
      - ./docker-compose/nginx:/etc/nginx/conf.d/
      - ./docker-compose/certbot/conf:/etc/letsencrypt
      - ./docker-compose/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
        meet.jitsi:

  #certbot:
  #  image: certbot/certbot
  #  volumes:
  #    - ./docker-compose/certbot/conf:/etc/letsencrypt
  #    - ./docker-compose/certbot/www:/var/www/certbot
  #  entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #  networks:
  #      meet.jitsi:

  redis:
    image: redis:latest
    container_name: aquarium-redis
    restart: unless-stopped
    volumes:
      - ./docker-compose/redis-data:/data
    networks:
        meet.jitsi:

networks:
    meet.jitsi:
